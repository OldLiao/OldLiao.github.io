<?xml version="1.0" encoding="utf-8" ?><rss version="2.0"><channel><title><![CDATA[qq_43460068的博客]]></title><description><![CDATA[]]></description><link>https://blog.csdn.net/qq_43460068</link><language>zh-cn</language><generator>https://blog.csdn.net/</generator><copyright><![CDATA[Copyright &copy; qq_43460068]]></copyright><item><title><![CDATA[Git学习]]></title><link>https://blog.csdn.net/qq_43460068/article/details/130049427</link><guid>https://blog.csdn.net/qq_43460068/article/details/130049427</guid><author>qq_43460068</author><pubDate>Mon, 01 May 2023 17:02:30 +0800</pubDate><description><![CDATA[注意：这里需要注意的是，回到上一个版本容易但是要想再回来就比较难了，因为这里其实可以和C语言的指针作为理解，Git的版本回退速度非常快，因为在Git内部有个指向当前版本的HEAD指针（头指针（个人理解）），当你回退版本的时候，Git仅仅是把HEAD从指向当前版本指向到上一个版本号，但是新版本的没有保存，相当于指针丢失了（野指针）。什么是修改，比如你新增了一行，这就是一个修改，删除一行，这也是一个修改，更改了某些字符，这也是一个修改，删了一些又增加了一些，也是一个修改，甚至创建一个新文件也算一个修改。]]></description><category></category></item><item><title><![CDATA[GDB Debug]]></title><link>https://blog.csdn.net/qq_43460068/article/details/130436347</link><guid>https://blog.csdn.net/qq_43460068/article/details/130436347</guid><author>qq_43460068</author><pubDate>Fri, 28 Apr 2023 22:42:39 +0800</pubDate><description><![CDATA[有一部分要付费..........]]></description><category></category></item><item><title><![CDATA[数据的表示和存储——]]></title><link>https://blog.csdn.net/qq_43460068/article/details/130171161</link><guid>https://blog.csdn.net/qq_43460068/article/details/130171161</guid><author>qq_43460068</author><pubDate>Sat, 15 Apr 2023 16:50:09 +0800</pubDate><description><![CDATA[1、任何一个实数都可以用一个定点整数和一个定点小数来表示，其中定点整数其实就是指的整数（来表示科学计数法中的指数部分），定点小数一般表示科学计数法中的小数部分（尾数）。2、浮点数是有精度的，之前是不知道为什么有的浮点数在计算机中是没有办法存储和表示的，只能根据某个特定的规则进行舍入和表示，而且浮点数数字越小越有可能精确表示，对于浮点数越大，精确表示的可能就越小，因为数越大，可表示的两个浮点数之间的距离越来越大。]]></description><category></category></item><item><title><![CDATA[数据的表示和存储1]]></title><link>https://blog.csdn.net/qq_43460068/article/details/130118421</link><guid>https://blog.csdn.net/qq_43460068/article/details/130118421</guid><author>qq_43460068</author><pubDate>Thu, 13 Apr 2023 14:56:30 +0800</pubDate><description><![CDATA[Q&AQ1: 在有些32位系统上，C表达式-2147483648 < 2147483647的执行结 果为false。Why？A1: 在ISO C90标准下，2147483648为unsigned int型，因此 “-2147483648 < 2147483647”按无符号数比较， 10……0B比01……1B大，结果为false。在ISO C99标准下，“-2147483648 < 2147483647”按带符号整数比较， 10……0B比01……1B小，结果为true。]]></description><category></category></item><item><title><![CDATA[计算机系统基本组成于基本功能]]></title><link>https://blog.csdn.net/qq_43460068/article/details/130090209</link><guid>https://blog.csdn.net/qq_43460068/article/details/130090209</guid><author>qq_43460068</author><pubDate>Tue, 11 Apr 2023 22:51:38 +0800</pubDate><description><![CDATA[C语言程序设计层数据的机器级表示，运算语句和过程调用的机器级表示操作系统、编译和链接指令集体系架构（ISA）和汇编层指令系统、机器代码，汇编语言微体系结构和硬件层CPU的通用结构层次结构存储系统1、冯诺依曼的结构：运算器+存储器+控制器+I/O设备2、冯诺依曼结构的最重要的思想就是：采用“存储程序”的思想3、控制器（控制）：对指令译码生成控制信号4、计算机实现的所有任务都是通过执行一条一条指令完成的。5、计算机是采用“存储程序”的工作方式。]]></description><category></category></item><item><title><![CDATA[计算机系统基础概述]]></title><link>https://blog.csdn.net/qq_43460068/article/details/130089908</link><guid>https://blog.csdn.net/qq_43460068/article/details/130089908</guid><author>qq_43460068</author><pubDate>Tue, 11 Apr 2023 18:10:39 +0800</pubDate><description><![CDATA[永远记住一句话，机器永远是对的！！！程序的执行结果不仅仅依赖于高级语言的语法和语义，还与其它好多方面有关。所以这必然要求理解程序的执行需要从一个系统的角度来思考，而不是仅仅只关注于语言的语法和语义，从系统角度思考问题。]]></description><category></category></item><item><title><![CDATA[Linux Shell脚本编程]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129886205</link><guid>https://blog.csdn.net/qq_43460068/article/details/129886205</guid><author>qq_43460068</author><pubDate>Fri, 31 Mar 2023 18:20:09 +0800</pubDate><description><![CDATA[Shell脚本是一种简单的编程语言，它由一系列命令组成，这些命令可以在命令行中逐个执行。它通常用于自动化常见任务，如文件管理、文本处理和系统管理。]]></description><category></category></item><item><title><![CDATA[Linux常用命令]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129778629</link><guid>https://blog.csdn.net/qq_43460068/article/details/129778629</guid><author>qq_43460068</author><pubDate>Tue, 28 Mar 2023 23:49:39 +0800</pubDate><description><![CDATA[命令本质上就是可执行程序这些命令都是平常使用常见的命令，像cd，ifconfig等无需刻意死记这些命令，随着使用Linux命令的次数增加以及遇到问题后查找之后，很快就会有更深刻的记忆，慢慢的就能记住，最根本的就是熟能生巧。参考博客Linux 命令大全 | 菜鸟教程 (runoob.com)]]></description><category></category></item><item><title><![CDATA[Linux的编译知识]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129825725</link><guid>https://blog.csdn.net/qq_43460068/article/details/129825725</guid><author>qq_43460068</author><pubDate>Tue, 28 Mar 2023 21:41:50 +0800</pubDate><description><![CDATA[在链接过程中，链接器会将 hello.o 中的符号引用解析为实际的地址，并将其与其他库文件链接起来生成可执行文件 hello。编译是指将预处理后的代码翻译成汇编代码，同时对代码进行语法检查、类型检查等操作，生成目标文件。交叉编译是指使用一台与目标系统不同的计算机（比如使用x86架构的计算机编译ARM架构的代码），通过交叉编译工具链进行编译生成可在目标系统上运行的程序。交叉编译的优势在于可以在速度较快的开发计算机上进行编译，生成针对目标系统的可执行文件，以节省目标系统上的时间和资源。]]></description><category></category></item><item><title><![CDATA[Linux的基础知识]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129717522</link><guid>https://blog.csdn.net/qq_43460068/article/details/129717522</guid><author>qq_43460068</author><pubDate>Wed, 22 Mar 2023 20:12:58 +0800</pubDate><description><![CDATA[inode是用来存放文件信息的，每个文件都会有一个inode，并且这个inode号是唯一的，文件的内容都是inode来指定的，而不是文件名，就类似于之前讲的UID号和用户名之间的关系，当系统要访问文件时，inode就会被复制到内存，从而实现文件的快速访问，使用ls -i命令则可以看到inode号，-i参数为打印文件的inode号硬连接只是一个新的链接到某个inode号码的记录而已，这个链接指向inode，系统并不给他重新分配inode可以用ln命令来建立硬连接格式：ln 源文件 目标文件。]]></description><category></category></item><item><title><![CDATA[Vim编辑器使用]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129677422</link><guid>https://blog.csdn.net/qq_43460068/article/details/129677422</guid><author>qq_43460068</author><pubDate>Tue, 21 Mar 2023 11:33:21 +0800</pubDate><description><![CDATA[Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。vim 则可以说是程序开发者的一项很好用的工具。连 vim 的官方网站 () 自己也说 vim 是一个程序开发工具而不是文字处理软件。vim是vi的加强版。]]></description><category></category></item><item><title><![CDATA[Linux用户和用户管理]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129676650</link><guid>https://blog.csdn.net/qq_43460068/article/details/129676650</guid><author>qq_43460068</author><pubDate>Mon, 20 Mar 2023 21:45:44 +0800</pubDate><description><![CDATA[其实说白了就是Linux系统不是通过用户名来识别用户的，而是因为不同的用户在Linux中是不同的UID号，而对于像公司里面的话，经常是多个人共用一个Linux服务器，而一般而且不同的部门都只能访问各自部门的文件和拥有对应的权限，所以又有一个组的概念，不同的组就是不同的GID号。用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留字段（难怪以前windows在实习的时候，提醒我改密码）用户组：一对一，一对多，多对一，多对多。]]></description><category></category></item><item><title><![CDATA[Linux简介]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129676419</link><guid>https://blog.csdn.net/qq_43460068/article/details/129676419</guid><author>qq_43460068</author><pubDate>Mon, 20 Mar 2023 21:13:39 +0800</pubDate><description><![CDATA[UNIX(贝尔实验室):最早的多用户、多任务操作系统，Unix在1979年后商业收费。创始人：Linus Torvalds，在1991.10.05发布第一个版本。曲线救国：gcc/glibc/bash shell/emacs。UNIX、Minix、GNU、Linux的历史渊源。Minix(谭宁邦):定位教学用途,没有发展壮大。Linux：学习Minix，借助GNU软件。GNU(史托曼):建立free UNIX，发展：现在几千万行代码。Hurd诞生,为时已晚。]]></description><category></category></item><item><title><![CDATA[数据结构——栈和队列实现]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129507861</link><guid>https://blog.csdn.net/qq_43460068/article/details/129507861</guid><author>qq_43460068</author><pubDate>Mon, 13 Mar 2023 21:46:20 +0800</pubDate><description><![CDATA[下面得代码中文均是采用的GBK编码方式，所以赋值粘贴时要选择成GBK形式避免乱码。]]></description><category></category></item><item><title><![CDATA[数据结构——线性表]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129472476</link><guid>https://blog.csdn.net/qq_43460068/article/details/129472476</guid><author>qq_43460068</author><pubDate>Sun, 12 Mar 2023 14:35:41 +0800</pubDate><description><![CDATA[线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。线性表（a1,a2,......an）的顺序存储结构如下：举个例子，有个同学，人特别老实，热心，经常帮室友去图书馆占座，他总是答应，如果一个宿舍九个人，他每一次吃完早饭，就冲去图书馆，挑一个好地，把他书包里的书一本一本的按座位放好，这里连续的九个位置就相当于是一个顺序存储结构。]]></description><category></category></item><item><title><![CDATA[数据结构——线性表]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129372310</link><guid>https://blog.csdn.net/qq_43460068/article/details/129372310</guid><author>qq_43460068</author><pubDate>Mon, 06 Mar 2023 22:24:16 +0800</pubDate><description><![CDATA[【代码】数据结构——线性表。]]></description><category></category></item><item><title><![CDATA[数据结构——基本概念]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129321029</link><guid>https://blog.csdn.net/qq_43460068/article/details/129321029</guid><author>qq_43460068</author><pubDate>Fri, 03 Mar 2023 15:32:48 +0800</pubDate><description><![CDATA[数据结构中分为。]]></description><category></category></item><item><title><![CDATA[数据结构前提知识]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129271192</link><guid>https://blog.csdn.net/qq_43460068/article/details/129271192</guid><author>qq_43460068</author><pubDate>Wed, 01 Mar 2023 09:40:06 +0800</pubDate><description><![CDATA[这里学到了以前没有体会到的概念：数据名就是一个指针常量，它是指向数组的第一个元素的地址函数名其实也是一个指针常量，它指向函数的地址，函数指针就是这个思想int *p = aint *q =&a //虽然这里可以看到，&a和a其实都是指的数组的第一个元素,打印出来结果都是第一个元素的地址//但是二者的偏移是不同的， p =(char *) a+1尽管a 和&a的值是一样的，都是数组的首地址，但是类型不一样a作为地址是 int *类型的，]]></description><category></category></item><item><title><![CDATA[FreeRTOS优先级翻转]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129227173</link><guid>https://blog.csdn.net/qq_43460068/article/details/129227173</guid><author>qq_43460068</author><pubDate>Sun, 26 Feb 2023 15:25:34 +0800</pubDate><description><![CDATA[任务优先级翻转在实时操作系统中是不允许出现的，使用互斥量的优先级继承可以解决优先级翻转的问题，但是这里只是能够降低优先级翻转带来的影响，而不能完全消除优先级翻转带来的问题，通俗的说，虽然低优先级任务优先级提高了，但是还是要等优先级低的任务执行释放操作，高优先级任务才可以得以运行，这里只是解决了介于低优先级和高优先级之间中优先级任务带来的问题。比如没有引入互斥量，高优先级需要等待L+M任务运行的时间，引入之后只有任务L运行的时间。一句话：优先级翻转可以减轻，但不能完全消除。]]></description><category></category></item><item><title><![CDATA[FreeRTOS信号量]]></title><link>https://blog.csdn.net/qq_43460068/article/details/129218071</link><guid>https://blog.csdn.net/qq_43460068/article/details/129218071</guid><author>qq_43460068</author><pubDate>Sat, 25 Feb 2023 20:24:40 +0800</pubDate><description><![CDATA[信号量是一种解决同步问题的机制，可以实现对共享资源的有序访问。其中，“同步”指的是任务之间的同步，即信号量可以使得一个任务等待另一个任务完成某件事后，才继续执行；而“有序访问”指的是对被多任务或中断访问的共享资源（如全局变量）的管理，当一个任务在访问（读取或写入）一个共享资源时，信号量可以防止其他任务或中断在这期间访问（读取或写入）这个共享资源。信号量是一种特殊的队列，其中二值信号量是长度为1的队列，计数型信号量是长度大于1的队列。]]></description><category></category></item></channel></rss>